"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Compiler = void 0;
const bud_framework_1 = require("@roots/bud-framework");
const bud_support_1 = require("@roots/bud-support");
const webpack_1 = require("webpack");
const budProcess = __importStar(require("./process"));
const { isFunction, isEqual } = bud_support_1.lodash;
/**
 * Wepback compilation controller class
 *
 * @public
 */
class Compiler extends bud_framework_1.Service {
    constructor() {
        super(...arguments);
        /**
         * Compilation stats
         *
         * @public
         */
        this.stats = {
            assets: [],
            errors: [],
            warnings: [],
        };
        /**
         * Compiler errors
         *
         * @public
         */
        this.errors = [];
        /**
         * Multi-compiler configuration
         *
         * @public
         */
        this.config = [];
    }
    /**
     * Initiates compilation
     *
     * @returns the compiler instance
     *
     * @public
     * @decorator `@bind`
     */
    async compile() {
        const config = await this.before();
        const compiler = await this.invoke(config);
        this.app.timeEnd('bud');
        return compiler;
    }
    /**
     * @public
     * @decorator `@bind`
     */
    async invoke(config) {
        await this.app.hooks.fire('event.compiler.before');
        this.instance = (0, webpack_1.webpack)(this.config);
        this.instance.hooks.done.tap(config.shift().name, async (stats) => {
            await this.app.hooks.fire('event.compiler.done');
            if (this.app.isDevelopment)
                await this.handleStats(stats);
        });
        new webpack_1.ProgressPlugin(this.progressCallback).apply(this.instance);
        await this.app.hooks.fire('event.compiler.after');
        return this.instance;
    }
    /**
     * Returns final webpack configuration
     *
     * @public
     * @decorator `@bind`
     */
    async before() {
        await this.app.build.make();
        /**
         * Attempt to use the parent instance in the compilation if there are entries
         * registered to it or if it has no child instances registered.
         */
        if (!this.app.hasChildren) {
            this.app.info(`using config from parent compiler`);
            this.config.push(this.app.build.config);
            return this.config;
        }
        this.app.warn(`root compiler will not be tapped (child compilers in use)`);
        /**
         * If there are {@link Framework.children} instances, iterate through
         * them and add to `config`
         */
        await Promise.all(this.app.children?.getValues().map(async (instance) => {
            if (!instance.name)
                return;
            await instance.build.make();
            this.config.push(instance.build.config);
        }));
        return this.config;
    }
    /**
     * Webpack callback
     *
     * @public
     * @decorator `@bind`
     */
    async callback(error, stats) {
        await this.handleErrors(error);
        await this.handleStats(stats);
        await this.app.hooks.fire('event.compiler.done');
        this.instance.close(err => {
            err && this.app.error(err);
            this.app.close();
        });
    }
    /**
     * Stats handler
     *
     * @public
     * @decorator `@bind`
     */
    async handleStats(stats) {
        if (!stats?.toJson || !isFunction(stats?.toJson))
            return;
        this.stats = stats.toJson(this.app.build.config.stats);
        budProcess.stats.write(this.stats);
    }
    /**
     * Error handler
     *
     * @public
     * @decorator `@bind`
     */
    async handleErrors(error) {
        if (!error)
            return;
        this.app.isDevelopment &&
            this.app.server.enabledMiddleware?.hot?.publish({ error });
        this.app.error(error);
    }
    /**
     * Progress callback
     *
     * @public
     * @decorator `@bind`
     */
    async progressCallback(percent, scope, ...message) {
        try {
            const normalPercent = Math.ceil((percent ?? 0) * 100);
            scope =
                (scope.includes(`]`) ? scope.split(`]`).pop()?.trim() : scope) ??
                    ``;
            message = message
                ? message.flatMap(i => (i ? `${i}`?.trim() : ``))
                : [];
            message.reverse();
            const isStale = isEqual(this.progress, [
                normalPercent,
                message.join(` `).concat(scope),
            ]);
            this.progress = [normalPercent, message.join(` `).concat(scope)];
            !isStale &&
                (message.length > 1 || scope) &&
                budProcess.logger
                    .scope(bud_support_1.chalk.green(`${normalPercent}%`), bud_support_1.chalk.blue(scope))
                    .log(...message);
        }
        catch (error) {
            this.app.error(error);
        }
    }
}
__decorate([
    bud_support_1.bind,
    bud_support_1.once
], Compiler.prototype, "compile", null);
__decorate([
    bud_support_1.bind
], Compiler.prototype, "invoke", null);
__decorate([
    bud_support_1.bind,
    bud_support_1.once
], Compiler.prototype, "before", null);
__decorate([
    bud_support_1.bind
], Compiler.prototype, "callback", null);
__decorate([
    bud_support_1.bind
], Compiler.prototype, "handleStats", null);
__decorate([
    bud_support_1.bind
], Compiler.prototype, "handleErrors", null);
__decorate([
    bud_support_1.bind
], Compiler.prototype, "progressCallback", null);
exports.Compiler = Compiler;
