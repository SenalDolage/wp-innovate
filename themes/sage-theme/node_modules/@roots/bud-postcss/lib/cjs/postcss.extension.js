"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BudPostCssExtension = void 0;
const bud_build_1 = require("@roots/bud-build");
const bud_postcss_1 = require("./bud.postcss");
const ensureDependencies = async function () {
    try {
        await Promise.resolve().then(() => __importStar(require('postcss')));
        this.success('postcss is installed');
        return true;
    }
    catch (e) {
        this.error(e);
        return;
    }
};
exports.BudPostCssExtension = {
    name: '@roots/bud-postcss',
    mixin: async () => ({
        postcss: [bud_postcss_1.PostCssConfig],
    }),
    register: async (app) => {
        const log = app.logger.scoped('@roots/bud-postcss');
        const postcssLoaded = await ensureDependencies.bind(app)();
        if (!postcssLoaded)
            return;
        app.build.loaders.postcss = new bud_build_1.Loader(require.resolve('postcss-loader'));
        app.build.items.postcss = new bud_build_1.Item({
            loader: app.build.loaders.postcss,
            options: ({ postcss }) => {
                return {
                    postcssOptions: {
                        ...app.extensions.get('@roots/bud-postcss').options.all(),
                        plugins: [...(postcss.getValues() ?? [])],
                    },
                    sourceMap: true,
                };
            },
        });
        app.build.rules.css.setUse(app => [
            app.isProduction ? app.build.items.minicss : app.build.items.style,
            app.build.items.css,
            app.build.items.postcss,
        ]);
        try {
            log.await('resolving postcss plugins');
            app.postcss.setPlugins({
                'postcss-import': [require.resolve('postcss-import')],
                'postcss-nested': [require.resolve('postcss-nested')],
                'postcss-preset-env': [
                    require.resolve('postcss-preset-env'),
                    {
                        stage: 1,
                        features: {
                            'focus-within-pseudo-class': false,
                        },
                    },
                ],
            });
            log.success('resolving postcss plugins');
        }
        catch (e) {
            app.error(e);
        }
    },
};
