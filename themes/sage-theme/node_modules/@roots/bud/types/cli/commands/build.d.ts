import { Bud } from '../../Bud/index.js';
import { BaseCommand } from './base.js';
/**
 * Accepted options
 *
 * @public
 */
export interface BuildOptions {
    cache?: Bud.Options['config']['cache'];
    features?: Bud.Options['config']['features'];
    location?: Bud.Options['config']['location'];
    minimize?: Bud.Options['config']['optimization']['minimize'];
    mode?: Bud.Options['config']['mode'];
    publicPath?: Bud.Options['config']['output']['publicPath'];
    target?: Array<string>;
}
/**
 * Build command
 *
 * @public
 */
export declare class BuildCommand extends BaseCommand {
    /**
     * Command paths
     *
     * @public
     */
    static paths: string[][];
    /**
     * Command usage
     *
     * @public
     */
    static usage: import("clipanion").Usage;
    /**
     * --mode
     */
    mode: "production" | "development";
    /**
     * --cache
     */
    cache: boolean;
    /**
     * --cache.type
     */
    cacheType: "filesystem" | "memory";
    /**
     * --clean
     */
    clean: boolean;
    /**
     * --dashboard
     */
    dashboard: boolean;
    /**
     * --devtool
     */
    devtool: boolean;
    /**
     * --hash
     */
    hash: boolean;
    /**
     * --html
     */
    html: boolean;
    /**
     * --inject
     */
    inject: boolean;
    /**
     * --project
     */
    project: string;
    /**
     * --src
     */
    src: string;
    dist: string;
    /**
     * --storage
     */
    storage: string;
    /**
     * --log
     */
    log: boolean;
    /**
     * --log.level
     */
    logLevel: "vvv" | "v" | "vv" | "vvvv";
    /**
     * --manifest
     */
    manifest: boolean;
    /**
     * --minimize
     */
    minimize: boolean;
    /**
     * --publicPath
     */
    publicPath: string;
    /**
     * --splitChunks
     */
    splitChunks: boolean;
    /**
     * --target
     */
    target: string[];
    /**
     * Bud configuration
     *
     * @remarks
     * Fills in whatever is missing with values from the seed config.
     *
     * @returns Bud configuration
     */
    config(): BuildOptions;
    /**
     * Execute command
     */
    execute(): Promise<void>;
}
//# sourceMappingURL=build.d.ts.map