"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CleanCommand = void 0;
const bud_support_1 = require("@roots/bud-support");
const clipanion_1 = require("clipanion");
const index_js_1 = require("../../factory/index.js");
const index_js_2 = require("../Notifier/index.js");
const base_js_1 = require("./base.js");
const { ensureDir, remove } = bud_support_1.fs;
class CleanCommand extends base_js_1.BaseCommand {
    async execute() {
        this.app = await (0, index_js_1.factory)({ config: this.config() });
        await this.cleanProjectAssets();
    }
    async cleanProjectAssets() {
        this.notifier = new index_js_2.Notifier(this.app);
        this.context.stdout.write('clearing artifacts\n');
        try {
            this.context.stdout.write(`emptying ${this.app.path('storage')}\n`);
            await ensureDir(this.app.path('storage'));
            await remove(this.app.path('storage'));
            this.context.stdout.write(bud_support_1.chalk.green(`✔ emptying ${this.app.path('storage')}\n`));
        }
        catch (err) {
            this.context.stderr.write(bud_support_1.chalk.red(err));
        }
        try {
            this.context.stdout.write(`emptying ${this.app.path('dist')}\n`);
            await remove(this.app.path('dist'));
            this.context.stdout.write(bud_support_1.chalk.green(`✔ emptying ${this.app.path('dist')}\n`));
        }
        catch (err) {
            this.app.error(err);
        }
    }
}
CleanCommand.paths = [[`clean`]];
CleanCommand.usage = clipanion_1.Command.Usage({
    category: `Clean`,
    description: `Clean project artifacts and caches`,
    examples: [[`Clean artifacts/caches`, `$0 clean`]],
});
__decorate([
    bud_support_1.bind
], CleanCommand.prototype, "cleanProjectAssets", null);
exports.CleanCommand = CleanCommand;
