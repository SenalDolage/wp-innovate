"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildCommand = void 0;
const bud_support_1 = require("@roots/bud-support");
const clipanion_1 = require("clipanion");
const lodash_1 = require("lodash");
const t = __importStar(require("typanion"));
const index_js_1 = require("../../factory/index.js");
const seed_js_1 = require("../../seed.js");
const overrides = __importStar(require("../config/override.config.js"));
const base_js_1 = require("./base.js");
/**
 * Build command
 *
 * @public
 */
class BuildCommand extends base_js_1.BaseCommand {
    constructor() {
        super(...arguments);
        /**
         * --mode
         */
        this.mode = clipanion_1.Option.String(`--mode`, seed_js_1.seed.mode, {
            description: `Compilation mode`,
            validator: t.isOneOf([
                t.isLiteral('production'),
                t.isLiteral('development'),
            ]),
        });
        /**
         * --cache
         */
        this.cache = clipanion_1.Option.Boolean(`--cache`, undefined, {
            description: `Utilize filesystem cache`,
        });
        /**
         * --cache.type
         */
        this.cacheType = clipanion_1.Option.String(`--cacheType,--cache.type`, undefined, {
            description: `Type of cache`,
            validator: t.isOneOf([
                t.isLiteral('filesystem'),
                t.isLiteral('memory'),
            ]),
        });
        /**
         * --clean
         */
        this.clean = clipanion_1.Option.Boolean(`--clean`, undefined, {
            description: `Clean artifacts and distributables prior to compilation`,
        });
        /**
         * --dashboard
         */
        this.dashboard = clipanion_1.Option.Boolean(`--dashboard`, undefined, {
            hidden: true,
        });
        /**
         * --devtool
         */
        this.devtool = clipanion_1.Option.Boolean(`--devtool`, undefined, {
            description: `Set devtool`,
        });
        /**
         * --hash
         */
        this.hash = clipanion_1.Option.Boolean(`--hash`, undefined, {
            description: 'Hash compiled files',
        });
        /**
         * --html
         */
        this.html = clipanion_1.Option.Boolean(`--html`, undefined, {
            description: 'Generate an html template',
        });
        /**
         * --inject
         */
        this.inject = clipanion_1.Option.Boolean(`--inject`, undefined, {
            description: 'Automatically inject extensions',
            hidden: true,
        });
        /**
         * --project
         */
        this.project = clipanion_1.Option.String(`--project`, undefined, {
            description: 'Project directory',
        });
        /**
         * --src
         */
        this.src = clipanion_1.Option.String(`--input,-i`, undefined, {
            description: 'Source directory (relative to project)',
        });
        /*
         * --dist
         */
        this.dist = clipanion_1.Option.String(`--output,-o`, undefined, {
            description: 'Distribution directory (relative to project)',
        });
        /**
         * --storage
         */
        this.storage = clipanion_1.Option.String(`--storage`, undefined, {
            description: 'Storage/cache directory (relative to project)',
        });
        /**
         * --log
         */
        this.log = clipanion_1.Option.Boolean(`--log`, undefined, {
            description: 'Enable logging',
        });
        /**
         * --log.level
         */
        this.logLevel = clipanion_1.Option.String(`--logLevel,--log.level`, seed_js_1.seed.log.level, {
            description: 'Set logging level',
            validator: t.isOneOf([
                t.isLiteral('v'),
                t.isLiteral('vv'),
                t.isLiteral('vvv'),
                t.isLiteral('vvvv'),
            ]),
        });
        /**
         * --manifest
         */
        this.manifest = clipanion_1.Option.Boolean(`--manifest`, undefined, {
            description: 'Generate a manifest of compiled assets',
        });
        /**
         * --minimize
         */
        this.minimize = clipanion_1.Option.Boolean(`--minimize`, undefined, {
            description: 'Minimize compiled assets',
        });
        /**
         * --publicPath
         */
        this.publicPath = clipanion_1.Option.String(`--publicPath`, undefined, {
            description: 'public path of emitted assets',
        });
        /**
         * --splitChunks
         */
        this.splitChunks = clipanion_1.Option.Boolean(`--splitChunks,--vendor`, undefined, {
            description: 'Separate vendor bundle',
        });
        /**
         * --target
         */
        this.target = clipanion_1.Option.Array(`--target,-t`, undefined, {
            description: 'Limit compilation to particular compilers',
        });
    }
    /**
     * Bud configuration
     *
     * @remarks
     * Fills in whatever is missing with values from the seed config.
     *
     * @returns Bud configuration
     */
    config() {
        const config = { ...seed_js_1.seed };
        config.mode = this.mode;
        if (!(0, lodash_1.isUndefined)(this.project))
            config.location.project = this.project;
        if (!(0, lodash_1.isUndefined)(this.src))
            config.location.src = this.src;
        if (!(0, lodash_1.isUndefined)(this.dist))
            config.location.dist = this.dist;
        if (!(0, lodash_1.isUndefined)(this.storage))
            config.location.storage = this.storage;
        if (!(0, lodash_1.isUndefined)(this.publicPath))
            config.publicPath = this.publicPath;
        if (!(0, lodash_1.isUndefined)(this.log))
            config.features.log = this.log;
        if (!(0, lodash_1.isUndefined)(this.manifest))
            config.features.manifest = this.manifest;
        return config;
    }
    /**
     * Execute command
     */
    async execute() {
        if (!bud_support_1.lodash.isUndefined(this.dashboard))
            this.context.stdout.write(`the --dashboard and --no-dashboard flags are deprecated and will be removed in a future release.\n`);
        this.app = await (0, index_js_1.factory)({ config: this.config() });
        await this.make();
        await overrides.config(this);
        await this.run();
    }
}
exports.BuildCommand = BuildCommand;
/**
 * Command paths
 *
 * @public
 */
BuildCommand.paths = [[`build`]];
/**
 * Command usage
 *
 * @public
 */
BuildCommand.usage = clipanion_1.Command.Usage({
    category: `Compile`,
    description: `Compile source assets`,
    details: `
      \`bud build\` compiles source assets from the \`src\` directory to the \`dist\` directory.

      Any boolean options can be negated by prefixing the flag with \`--no-\`. You can also pass a boolean
      value. Example: \`--no-cache\` and \`--cache false\` are equivalent.

      By default, the \`src\` directory is \`[cwd]/src\`. You can override this with the \`-i\` flag.

      If you run this command without a bud configuration file \`bud\` will
      look for an entrypoint at \`src/index.js\`.
    `,
    examples: [[`Compile source`, `$0 build`]],
});
