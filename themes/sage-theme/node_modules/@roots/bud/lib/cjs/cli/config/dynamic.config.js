"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.configs = void 0;
const bud_support_1 = require("@roots/bud-support");
const { isFunction } = bud_support_1.lodash;
/**
 * User config parser
 *
 * @internal
 */
class Configuration {
    /**
     * Class constructor
     *
     * @param app - Bud instance
     * @param logger - Logger instance
     * @param key - configuration key (project service repository)
     *
     * @internal
     */
    constructor(app, logger, paths) {
        this.app = app;
        this.logger = logger;
        this.paths = paths;
        paths.map(path => {
            this.logger.log(`processing ${path}`);
        });
    }
    /**
     * @internal
     */
    async run() {
        await Promise.all(this.paths.map(async (path) => {
            const callback = await this.import(path);
            await this.invoke(callback, path);
        }));
    }
    /**
     * @internal
     */
    async import(config) {
        try {
            this.logger.await({
                message: 'importing module',
                suffix: bud_support_1.chalk.dim(config),
            });
            const raw = config.endsWith('.ts')
                ? await this.app.ts.read(config)
                : await Promise.resolve().then(() => __importStar(require(config)));
            const result = isFunction(raw?.default) ? raw.default : raw;
            if (!isFunction(result)) {
                this.logger.error({ message: config });
                throw new Error(`${config} is not a function`);
            }
            return result;
        }
        catch (e) {
            throw new Error(e);
        }
    }
    /**
     * @internal
     */
    async invoke(callback, path) {
        try {
            if (!isFunction(callback)) {
                this.logger.error({ message: path });
                throw new Error(`${path} is not a function`);
            }
            this.logger.await({
                message: `calling user config`,
                suffix: bud_support_1.chalk.dim(path),
            });
            await callback(this.app);
        }
        catch (error) {
            this.logger.error({ message: error });
        }
    }
}
/**
 * @internal
 */
const configs = async (app, logger) => {
    const generalConfigs = app.project.get('configs.dynamic.global');
    const conditionalConfigs = app.project.get('configs.dynamic.conditional');
    const processAllEnqueued = async () => {
        await app.api.processQueue();
        await app.extensions.processQueue();
    };
    if (generalConfigs?.length) {
        await processAllEnqueued();
        const dynamicConfig = new Configuration(app, logger, generalConfigs);
        await dynamicConfig.run();
        await processAllEnqueued();
    }
    if (conditionalConfigs?.length) {
        await processAllEnqueued();
        const staticConfig = new Configuration(app, logger, conditionalConfigs);
        await staticConfig.run();
        await processAllEnqueued();
    }
};
exports.configs = configs;
