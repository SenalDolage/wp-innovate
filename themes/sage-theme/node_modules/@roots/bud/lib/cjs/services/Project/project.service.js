"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Project = void 0;
const Framework = __importStar(require("@roots/bud-framework"));
const bud_support_1 = require("@roots/bud-support");
const peers_1 = require("./peers");
const project_dependencies_1 = require("./project.dependencies");
const project_repository_1 = require("./project.repository");
const { ensureFile, readJson } = bud_support_1.fs;
/**
 * Project service
 *
 * @public
 */
class Project extends Framework.Service {
    constructor() {
        super(...arguments);
        /**
         * Service ident
         *
         * @internal
         */
        this.ident = 'project';
        /**
         * Repository values
         *
         * @public
         */
        this.repository = project_repository_1.repository;
    }
    /**
     * Path to profile.json reference file
     *
     * @public
     */
    get profilePath() {
        return this.app.path('storage', this.app.name, 'profile.json');
    }
    /**
     * Service bootstrap event
     *
     * @internal
     * @decorator `@bind`
     */
    async bootstrap() {
        this.peers = new peers_1.Peers(this.app);
        await this.loadManifest();
        const setLocale = key => this.app.store.set(`location.${key}`, this.get(`manifest.${this.app.name}.location.${key}`) ??
            this.app.options.config.location[key]);
        ['project', 'src', 'dist', 'storage', 'modules'].map(setLocale);
    }
    /**
     * Service register event
     *
     * @internal
     * @decorator `@bind`
     */
    async register() {
        this.set('env', {
            public: this.app.env.getPublicEnv(),
            all: this.app.env.all(),
        });
        this.set('dependencies', [this.app.path('project', 'package.json')]);
        try {
            await this.buildProfile();
        }
        catch (e) {
            this.log('error', e);
        }
        if (this.app.store.is('features.install', true)) {
            if (this.isEmpty('unmet'))
                return;
            await this.app.dependencies.install(this.get('unmet'));
            await this.loadManifest();
        }
    }
    /**
     * Service boot event
     *
     * @internal
     * @decorator `@bind`
     */
    async boot() {
        this.app.hooks.action('event.build.after', async (app) => {
            await app.hooks.fire('event.project.write');
            await this.writeProfile();
        });
    }
    /**
     * Read project package.json and record peer dependencies
     *
     * @public
     * @decorator `@bind`
     */
    async resolvePeers() {
        await this.peers.discover();
        this.set('modules', this.peers.modules);
        this.set('adjacents', this.peers.adjacents.fromRoot('root'));
    }
    /**
     * Read manifest from disk
     *
     * @public
     */
    async loadManifest() {
        const manifest = await readJson(this.app.path('project', 'package.json'));
        this.set('manifest', manifest);
        this.merge('installed', {
            ...(this.get('manifest.devDependencies') ?? {}),
            ...(this.get('manifest.dependencies') ?? {}),
        });
    }
    /**
     * Returns true if a dependency is listed in the project manifest
     *
     * @public
     * @decorator `@bind`
     */
    hasPeerDependency(pkg) {
        return this.has(`peers.${pkg}`);
    }
    /**
     * @public
     */
    async buildProfile() {
        await ensureFile(this.profilePath);
        this.log('time', 'building profile');
        try {
            await this.loadManifest();
            await this.resolvePeers();
            await this.searchConfigs();
        }
        catch (e) {
            this.log('error', {
                message: 'building profile',
                suffix: e,
            });
        }
        this.log('timeEnd', 'building profile');
    }
    /**
     * @public
     */
    async writeProfile() {
        await ensureFile(this.profilePath);
        await (0, project_dependencies_1.writeFile)(this.profilePath, (0, bud_support_1.jsonStringify)(this.repository, null, 2));
        this.log('success', {
            message: 'write profile',
            suffix: this.profilePath,
        });
    }
    async readProfile() {
        await ensureFile(this.profilePath);
        this.log('await', {
            message: 'read profile',
            suffix: this.profilePath,
        });
        try {
            const res = await readJson(this.profilePath);
            this.log('success', {
                message: 'read profile',
                suffix: this.profilePath,
            });
            return res;
        }
        catch (e) {
            this.log('error', {
                message: 'read profile',
                suffix: this.profilePath,
            });
        }
    }
    async searchConfigs() {
        this.log('await', 'reading project configuration files');
        const configs = [
            {
                key: 'configs.dynamic.global',
                searchStrings: [
                    `${this.app.name}.config.ts`,
                    `${this.app.name}.config.js`,
                ],
            },
            {
                key: `configs.dynamic.conditional`,
                searchStrings: [
                    `${this.app.name}.${this.app.mode}.config.ts`,
                    `${this.app.name}.${this.app.mode}.config.js`,
                ],
            },
            {
                key: 'configs.json.global',
                searchStrings: [
                    `${this.app.name}.config.json`,
                    `${this.app.name}.config.yml`,
                ],
            },
            {
                key: 'configs.json.conditional',
                searchStrings: [
                    `${this.app.name}.${this.app.mode}.config.json`,
                    `${this.app.name}.${this.app.mode}.config.yml`,
                ],
            },
        ];
        const findConfig = async function ({ key, searchStrings }) {
            const search = await bud_support_1.globby.globby(searchStrings, {
                cwd: this.app.path('project'),
            });
            if (!search || !search?.length)
                return;
            await Promise.all(search.map(async (result) => {
                this.log('note', {
                    message: 'located user config',
                    suffix: result,
                });
                if (!result || !result.length)
                    return;
                this.merge('dependencies', [this.app.path('project', result)]);
                if (!result.endsWith('json') && !result.endsWith('yml')) {
                    return this.merge(key, [this.app.path('project', result)]);
                }
                if (result.endsWith('.json')) {
                    const json = await this.app.json.read(this.app.path('project', result));
                    this.app.dump(json);
                    return this.merge(key, json);
                }
                if (result.endsWith('.yml')) {
                    return this.mutate(key, i => Array.from(new Set([
                        ...i,
                        this.app.yml.read(this.app.path('project', result)),
                    ])));
                }
            }));
        };
        await Promise.all(configs.map(findConfig.bind(this)));
        this.app.dump(this.get('configs'), {
            prefix: 'project config results',
        });
    }
}
__decorate([
    bud_support_1.bind
], Project.prototype, "register", null);
__decorate([
    bud_support_1.bind
], Project.prototype, "boot", null);
__decorate([
    bud_support_1.bind
], Project.prototype, "resolvePeers", null);
__decorate([
    bud_support_1.bind
], Project.prototype, "loadManifest", null);
__decorate([
    bud_support_1.bind
], Project.prototype, "hasPeerDependency", null);
__decorate([
    bud_support_1.bind
], Project.prototype, "buildProfile", null);
__decorate([
    bud_support_1.bind
], Project.prototype, "writeProfile", null);
__decorate([
    bud_support_1.bind
], Project.prototype, "readProfile", null);
__decorate([
    bud_support_1.bind
], Project.prototype, "searchConfigs", null);
exports.Project = Project;
