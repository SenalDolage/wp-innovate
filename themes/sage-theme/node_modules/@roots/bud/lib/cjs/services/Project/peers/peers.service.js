"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Peers = void 0;
const bud_support_1 = require("@roots/bud-support");
const path_1 = require("path");
const adjacencyList_1 = require("./adjacencyList");
const { readJson } = bud_support_1.fs;
const { dirname, join } = path_1.posix;
/**
 * Peers service class
 *
 * @public
 */
class Peers {
    /**
     * Class constructor
     *
     * @public
     */
    constructor(app) {
        this.app = app;
        this.hasMissingDependencies = false;
        this.modules = {};
        this.peerDependencies = new Map();
    }
    /**
     * Log helper
     *
     * @public
     */
    get log() {
        return this.app.project.log;
    }
    /**
     * Returns path for a module name (if findable)
     *
     * @public
     * @decorator `@bind`
     */
    async resolveModulePath(name) {
        try {
            const result = await bud_support_1.pkgUp.pkgUp({
                cwd: dirname((0, bud_support_1.safeResolve)(name)),
            });
            return dirname(result);
        }
        catch (err) {
            this.log('error', `${name} manifest cannot be resolved`);
            return;
        }
    }
    /**
     * Returns manifest for a module from name (if findable)
     *
     * @public
     * @decorator `@bind`
     */
    async getManifest(directoryPath) {
        try {
            return await readJson(join(directoryPath, '/package.json'));
        }
        catch (err) {
            this.log('error', {
                message: `manifest could not be resolved`,
                suffix: directoryPath,
            });
        }
    }
    /**
     * Plumbs project dependencies and gathers data
     * on bud related modules
     *
     * @public
     * @decorator `@bind`
     */
    async discover() {
        try {
            const manifest = await this.getManifest(this.app.path('project'));
            this.modules['root'] = {
                ...manifest,
                name: 'root',
                version: manifest.version ?? '0.0.0',
                bud: manifest.bud ?? null,
                parent: null,
                resolvable: manifest ? true : false,
                requires: Object.entries({
                    ...(manifest.devDependencies ?? {}),
                    ...(manifest.dependencies ?? {}),
                }),
            };
            await Promise.all(this.modules['root'].requires
                .filter(([name]) => !name.startsWith('@types'))
                .map(async ([name]) => {
                await this.collect(name);
            }));
            this.adjacents = new adjacencyList_1.AdjacencyList(this.modules);
        }
        catch (e) {
            this.app.error(e);
        }
        return this;
    }
    async retrieveManifest(name) {
        const searchDir = await this.resolveModulePath(name);
        if (!searchDir)
            return false;
        return await this.getManifest(searchDir);
    }
    async collect(name) {
        const manifest = await this.retrieveManifest(name);
        if (!manifest) {
            this.hasMissingDependencies = true;
        }
        const dependency = {
            name: manifest.name ?? name,
            version: manifest.version ?? '0.0.0',
            bud: manifest.bud ?? null,
            resolvable: manifest ? true : false,
            peerDependencies: manifest.peerDependencies ?? {},
            requires: Object.entries({
                ...manifest.bud?.peers?.reduce((a, k) => ({
                    ...a,
                    [k]: manifest.version,
                }), {}),
            }),
        };
        if (dependency.bud?.type !== 'extension')
            return;
        this.modules[name] = dependency;
        if (dependency.peerDependencies) {
            Object.entries(dependency.peerDependencies).forEach(([name, version]) => this.peerDependencies.set(name, version));
        }
        if (dependency.requires) {
            await Promise.all(Array.from(dependency.requires)
                .filter(([key]) => !key.startsWith('@types/'))
                .map(async ([key]) => {
                await this.collect(key);
            }));
        }
    }
}
__decorate([
    bud_support_1.bind
], Peers.prototype, "resolveModulePath", null);
__decorate([
    bud_support_1.bind
], Peers.prototype, "getManifest", null);
__decorate([
    bud_support_1.bind
], Peers.prototype, "discover", null);
__decorate([
    bud_support_1.bind
], Peers.prototype, "retrieveManifest", null);
__decorate([
    bud_support_1.bind
], Peers.prototype, "collect", null);
exports.Peers = Peers;
