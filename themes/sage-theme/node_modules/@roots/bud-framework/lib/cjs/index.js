"use strict";
// Copyright (c) Roots Foundation, LLC. All rights reserved.
// Licensed under the MIT license.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = exports.Bootstrapper = exports.Server = exports.Service = exports.Rule = exports.Loader = exports.Item = exports.Framework = exports.Extension = exports.Cache = exports.Build = exports.Store = void 0;
/**
 * ⚡️ Bud/Framework - Extensible build tooling for modern web development
 *
 * @remarks
 * The {@link @roots/bud-framework# | @roots/bud-framework} package defines the
 * abstract {@link Framework} class and provides interfaces for the Framework's
 * essential {@link Service} classes.
 *
 * The overarching design goal of this architecture is to make it as simple as
 * possible to swap out the underlying {@link Service} implementations without
 * having to modify the core framework code.
 *
 * To that effect, interoperability with other build tools is possible through
 * extending the {@link Framework} class and adding or modifying {@link Service}
 * classes.
 *
 * The original implementation uses Webpack as the underlying
 * build tool, but this is not a requirement for future implementations and
 * we've done our best to maintain a separation of core code from
 * the build tool we are currently leveraging.
 *
 * We sincerely hope that these efforts will help you build a better web.
 *
 * @see https://roots.io/bud
 * @see https://github.com/roots/bud
 *
 * @packageDocumentation
 */
const Build_1 = __importStar(require("./Build"));
exports.Build = Build_1.default;
Object.defineProperty(exports, "Item", { enumerable: true, get: function () { return Build_1.Item; } });
Object.defineProperty(exports, "Loader", { enumerable: true, get: function () { return Build_1.Loader; } });
const Rule = __importStar(require("./Build/Rule"));
exports.Rule = Rule;
const Cache = __importStar(require("./Cache"));
exports.Cache = Cache;
const Extension = __importStar(require("./Extensions/Extension"));
exports.Extension = Extension;
const Framework_1 = require("./Framework");
Object.defineProperty(exports, "Framework", { enumerable: true, get: function () { return Framework_1.Framework; } });
const Server = __importStar(require("./Server"));
exports.Server = Server;
const Service_1 = require("./Service");
Object.defineProperty(exports, "Service", { enumerable: true, get: function () { return Service_1.Service; } });
/**
 * Concrete classes
 */
//
var Store_1 = require("./Store");
Object.defineProperty(exports, "Store", { enumerable: true, get: function () { return Store_1.Store; } });
var Bootstrapper_1 = require("./Bootstrapper");
Object.defineProperty(exports, "Bootstrapper", { enumerable: true, get: function () { return Bootstrapper_1.Bootstrapper; } });
var Logger_1 = require("./Logger");
Object.defineProperty(exports, "Logger", { enumerable: true, get: function () { return Logger_1.Logger; } });
