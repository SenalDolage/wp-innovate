"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.persist = void 0;
const bud_support_1 = require("@roots/bud-support");
const persist = function (cacheStrategy) {
    const ctx = this;
    if (cacheStrategy === false) {
        ctx.api.log('success', { message: 'cache disabled' });
        ctx.hooks.on('build.cache', () => false);
        return ctx;
    }
    if (cacheStrategy === 'memory') {
        ctx.api.log('success', {
            message: 'cache enabled',
            suffix: bud_support_1.chalk.dim('memory'),
        });
        ctx.hooks.on('build.cache', () => ({
            type: ctx.hooks.filter('build.cache.type'),
        }));
        ctx.hooks.on('build.cache.type', () => 'memory');
        return ctx;
    }
    ctx.hooks
        .on('build.cache', () => ({
        type: ctx.hooks.filter('build.cache.type'),
        version: ctx.hooks.filter('build.cache.version'),
        cacheDirectory: ctx.hooks.filter('build.cache.cacheDirectory'),
        managedPaths: ctx.hooks.filter('build.cache.managedPaths'),
        buildDependencies: ctx.hooks.filter('build.cache.buildDependencies'),
    }))
        .hooks.on('build.cache.version', () => ctx.cache.version)
        .hooks.on('build.cache.type', () => 'filesystem')
        .hooks.on('build.cache.cacheDirectory', () => ctx.path('storage', 'cache', 'webpack'))
        .hooks.on('build.cache.buildDependencies', () => ({
        bud: Array.from(new Set(ctx.project.get('dependencies'))),
    }))
        .hooks.on('build.cache.managedPaths', () => [ctx.path('modules')]);
    ctx.api.log('success', {
        message: 'cache enabled',
        suffix: bud_support_1.chalk.dim('filesystem'),
    });
    return ctx;
};
exports.persist = persist;
