"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.method = void 0;
const method = function (input) {
    const ctx = this;
    if (!ctx.isDevelopment)
        return ctx;
    if (typeof input === 'number') {
        return ctx.hooks.on('dev.url', url => {
            url.port = `${input}`;
            return url;
        });
    }
    if (typeof input === 'string') {
        return ctx.hooks.on('dev.url', new URL(input));
    }
    if (input instanceof URL) {
        return ctx.hooks.on('dev.url', input);
    }
    input.url &&
        ctx.hooks.on('dev.url', input.url instanceof URL ? input.url : new URL(input.url));
    input.key && ctx.hooks.on('dev.ssl.key', input.key);
    input.cert && ctx.hooks.on('dev.ssl.cert', input.cert);
    ctx.hooks.filter('dev.ssl.key') &&
        ctx.hooks.filter('dev.ssl.cert') &&
        ctx.hooks.on('dev.url', url => {
            url.protocol = `https:`;
            url.port = url.port ?? `443`;
            return url;
        });
    input.watch?.files &&
        ctx.hooks.on('dev.watch.files', files => {
            input.watch.files.forEach(file => files.add(file));
            return files;
        });
    input.watch?.options &&
        ctx.hooks.on('dev.watch.options', options => ({
            ...options,
            ...input.watch.options,
        }));
    input.client?.scripts &&
        ctx.hooks.on('dev.client.scripts', scripts => {
            input.client.scripts.forEach(script => scripts.add(script));
            return scripts;
        });
    return ctx;
};
exports.method = method;
