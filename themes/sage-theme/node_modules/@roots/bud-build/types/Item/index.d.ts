import { Base, Factory, Framework, Loader, Maybe } from './item.interface';
/**
 * Item class
 *
 * @public
 */
export declare class Item extends Base.Abstract implements Base.Interface {
    /**
     * Loader
     *
     * @public
     */
    loader: Factory<[Framework], Loader.Interface>;
    /**
     * Loader options
     *
     * @public
     */
    options: Factory<[Framework], Base.Options>;
    /**
     * Class constructor
     *
     * @param options - {@link Base.Options}
     */
    constructor({ loader, options }: Base.ConstructorOptions);
    /**
     * {@inheritDoc @roots/Framework-Framework#Item.Abstract.getLoader}
     *
     * @public
     * @decorator `@bind`
     */
    getLoader(app: Framework): Loader.Interface;
    /**
     * @public
     * @decorator `@bind`
     */
    setLoader(loader: Maybe<[Framework], Loader.Interface>): void;
    /**
     * @public
     * @decorator `@bind`
     */
    setOptions(options: Maybe<[Framework], Base.Options>): void;
    /**
     * @public
     * @decorator `@bind`
     */
    mergeOptions(options: Base.Options, app: Framework): void;
    /**
     * @public
     * @decorator `@bind`
     */
    make(app: Framework): Base.Output;
}
//# sourceMappingURL=index.d.ts.map