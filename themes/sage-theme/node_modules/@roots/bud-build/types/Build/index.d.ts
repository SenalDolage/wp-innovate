import { Build as Contract, Items, Loaders, Rules, Service } from '@roots/bud-framework';
import type * as Webpack from 'webpack';
import { Configuration } from 'webpack';
import { Rule } from '../Rule/index';
/**
 * Webpack configuration builder class
 *
 * @public
 */
export declare class Build extends Service implements Contract.Interface {
    /**
     * @public
     */
    config: Partial<Configuration>;
    /**
     * Registered loaders
     *
     * @public
     */
    loaders: Loaders;
    /**
     * Registered rules
     *
     * @public
     */
    rules: Rules;
    /**
     * Registered items
     *
     * @public
     */
    items: Items;
    /**
     * Service booted event
     *
     * @public
     * @decorator `@bind`
     */
    registered(): Promise<void>;
    /**
     * Make webpack configuration
     *
     * @public
     * @decorator `@bind`
     */
    make(): Promise<Webpack.Configuration>;
    /**
     * Service register event
     *
     * @public
     * @decorator `@bind`
     */
    register(): Promise<void>;
    /**
     * Set a rule
     *
     * @param name - rule key
     * @param constructorProperties - rule constructor properties
     * @returns the rule
     *
     * @public
     * @decorator `@bind`
     */
    setRule(name: string, constructorProperties?: any): Rule;
    /**
     * Make a rule
     *
     * @param constructorProperties - rule constructor properties
     * @returns the rule
     *
     * @public
     * @decorator `@bind`
     */
    makeRule(constructorProperties?: any): Rule;
    /**
     * Write final configuration to storage directory
     *
     * @public
     * @decorator `@bind`
     */
    writeFinalConfig(): Promise<void>;
}
//# sourceMappingURL=index.d.ts.map