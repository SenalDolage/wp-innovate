"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Item = void 0;
const item_dependencies_1 = require("./item.dependencies");
const item_interface_1 = require("./item.interface");
/**
 * Item class
 *
 * @public
 */
class Item extends item_interface_1.Base.Abstract {
    /**
     * Class constructor
     *
     * @param options - {@link Base.Options}
     */
    constructor({ loader, options }) {
        super();
        this.setLoader(loader);
        options && this.setOptions(options);
    }
    /**
     * {@inheritDoc @roots/Framework-Framework#Item.Abstract.getLoader}
     *
     * @public
     * @decorator `@bind`
     */
    getLoader(app) {
        return this.loader(app);
    }
    /**
     * @public
     * @decorator `@bind`
     */
    setLoader(loader) {
        this.loader = (0, item_dependencies_1.isFunction)(loader) ? loader : () => loader;
    }
    /**
     * @public
     * @decorator `@bind`
     */
    setOptions(options) {
        this.options = (0, item_dependencies_1.isFunction)(options) ? options : () => options;
    }
    /**
     * @public
     * @decorator `@bind`
     */
    mergeOptions(options, app) {
        options = {
            ...this.options(app),
            ...options,
        };
        this.setOptions((app) => options);
    }
    /**
     * @public
     * @decorator `@bind`
     */
    make(app) {
        const output = {
            loader: this.loader(app).make(app),
        };
        if (this.options) {
            output.options = this.options(app);
        }
        return output;
    }
}
__decorate([
    item_dependencies_1.bind
], Item.prototype, "getLoader", null);
__decorate([
    item_dependencies_1.bind
], Item.prototype, "setLoader", null);
__decorate([
    item_dependencies_1.bind
], Item.prototype, "setOptions", null);
__decorate([
    item_dependencies_1.bind
], Item.prototype, "mergeOptions", null);
__decorate([
    item_dependencies_1.bind
], Item.prototype, "make", null);
exports.Item = Item;
