"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Item_1 = require("../Item");
/**
 * Items
 *
 * @public
 */
exports.default = {
    /**
     * .css handler factory
     *
     * @public
     */
    css: () => new Item_1.Item({
        loader: ({ build }) => build.loaders.css,
        options: ({ hooks }) => ({
            importLoaders: 1,
            sourceMap: hooks.filter('build.devtool') ? true : false,
        }),
    }),
    /**
     * .css handler factory
     *
     * @public
     */
    cssModule: () => new Item_1.Item({
        loader: ({ build }) => build.loaders.css,
        options: ({ hooks }) => ({
            importLoaders: 1,
            localIdentName: '[name]__[local]___[hash:base64:5]',
            modules: true,
            sourceMap: hooks.filter('build.devtool') ? true : false,
        }),
    }),
    /**
     * .csv handler factory
     *
     * @public
     */
    csv: () => new Item_1.Item({
        loader: ({ build }) => build.loaders.csv,
    }),
    /**
     * .html handler factory
     *
     * @public
     */
    html: () => new Item_1.Item({
        loader: ({ build }) => build.loaders.html,
    }),
    /**
     * Factory {@link Item} for style
     *
     * @public
     */
    style: () => new Item_1.Item({
        loader: ({ build }) => build.loaders.style,
    }),
    /**
     * Factory {@link Item} for markdown
     *
     * @public
     */
    md: () => new Item_1.Item({
        loader: ({ build }) => build.loaders.md,
    }),
    /**
     * Factory {@link Item} for minicss-extract-plugin
     *
     * @public
     */
    minicss: () => new Item_1.Item({
        loader: ({ build }) => build.loaders.minicss,
    }),
    /**
     * Factory {@link Item} for raw
     *
     * @public
     */
    raw: () => new Item_1.Item({
        loader: ({ build }) => build.loaders.raw,
    }),
    /**
     * Factory {@link Item} for file
     *
     * @public
     */
    file: () => new Item_1.Item({
        loader: ({ build }) => build.loaders.file,
        options: app => ({
            name: app.store.is('features.hash', true)
                ? app.store.get('hashFormat').concat('.[ext]')
                : app.store.get('fileFormat').concat('.[ext]'),
        }),
    }),
    /**
     * Factory {@link Item} resolve-url
     *
     * @public
     */
    [`resolve-url`]: () => new Item_1.Item({
        loader: ({ build }) => build.loaders['resolve-url'],
        options: ({ path, hooks }) => ({
            root: path('src'),
            sourceMap: hooks.filter('build.devtool') ?? false,
        }),
    }),
    /**
     * Factory {@link Item} for xml
     *
     * @public
     */
    xml: () => new Item_1.Item({
        loader: ({ build }) => build.loaders.xml,
    }),
};
