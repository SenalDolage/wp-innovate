"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cache = void 0;
const bud_support_1 = require("@roots/bud-support");
const helpful_decorators_1 = require("helpful-decorators");
const cache_dependencies_1 = require("./cache.dependencies");
const { readFile } = bud_support_1.fs;
/**
 * Cache service class
 *
 * @public
 */
class Cache extends cache_dependencies_1.Bud.Cache.Abstract {
    /**
     * @public
     */
    async boot() {
        this.version = await this.hashFileContents();
        if (this.app.store.get('features.cache')) {
            this.app.api.call('persist', 'filesystem');
        }
    }
    /**
     * @public
     */
    async hashFileContents() {
        const makeHash = async (str) => (0, cache_dependencies_1.createHash)('sha1')
            .update(str)
            .digest('base64')
            .replace(/[^a-z0-9]/gi, '_')
            .toLowerCase();
        try {
            const paths = this.app.project.get('dependencies');
            const strings = await Promise.all(paths.map(async (path) => readFile(path, 'utf8')));
            const hash = await makeHash(`${strings}${JSON.stringify(this.app.project.get('cli'))}`);
            this.log('info', {
                message: 'cache hash generated',
                suffix: hash,
            });
            this.app.hooks.action('event.project.write', async (app) => {
                app.project.set('cache.hash', hash);
            });
            return hash;
        }
        catch (e) {
            this.app.error('error hashing file contents for cache');
            throw new Error(e);
        }
    }
}
__decorate([
    helpful_decorators_1.bind
], Cache.prototype, "boot", null);
__decorate([
    helpful_decorators_1.bind
], Cache.prototype, "hashFileContents", null);
exports.Cache = Cache;
