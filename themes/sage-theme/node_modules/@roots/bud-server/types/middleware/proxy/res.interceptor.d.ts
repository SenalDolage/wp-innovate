/// <reference types="node" />
import { Framework } from '@roots/bud-framework';
import { IncomingMessage, ServerResponse } from 'http';
import { ApplicationURL } from './url';
/**
 * Proxy response interceptor
 *
 * @public
 */
export declare class ResponseInterceptorFactory {
    _app: () => Framework;
    url: ApplicationURL;
    /**
     * The bud instance
     *
     * @public
     */
    get app(): Framework;
    /**
     * Class constructor
     *
     * @public
     */
    constructor(_app: () => Framework, url: ApplicationURL);
    /**
     * Response interceptor
     *
     * @remarks
     * This is the callback for `http-proxy-middleware`s `responseInterceptor`.
     * It is called after the response has been received from the target server.
     * It is passed the response body, the response object, and the request object.
     * It can be used to modify the response body or the response object.
     *
     * @param buffer - Buffered response body
     * @param proxyRes - Response from the proxy
     * @param req - Request from the client
     * @param res - Response from the server
     * @returns client response body
     *
     * @public
     * @decorator `@bind`
     */
    _interceptor(buffer: Buffer, _proxyRes: IncomingMessage, _req: IncomingMessage, res: ServerResponse): Promise<Buffer | string>;
    /**
     * Returns the `onProxyRes` callback for `http-proxy-middleware`
     *
     * @public
     * @decorator `@bind`
     */
    make(): (proxyRes: IncomingMessage, req: IncomingMessage, res: ServerResponse) => Promise<void>;
}
//# sourceMappingURL=res.interceptor.d.ts.map