"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResponseInterceptorFactory = void 0;
const bud_support_1 = require("@roots/bud-support");
const http_proxy_middleware_1 = require("http-proxy-middleware");
/**
 * Proxy response interceptor
 *
 * @public
 */
class ResponseInterceptorFactory {
    /**
     * Class constructor
     *
     * @public
     */
    constructor(_app, url) {
        this._app = _app;
        this.url = url;
    }
    /**
     * The bud instance
     *
     * @public
     */
    get app() {
        return this._app();
    }
    /**
     * Response interceptor
     *
     * @remarks
     * This is the callback for `http-proxy-middleware`s `responseInterceptor`.
     * It is called after the response has been received from the target server.
     * It is passed the response body, the response object, and the request object.
     * It can be used to modify the response body or the response object.
     *
     * @param buffer - Buffered response body
     * @param proxyRes - Response from the proxy
     * @param req - Request from the client
     * @param res - Response from the server
     * @returns client response body
     *
     * @public
     * @decorator `@bind`
     */
    async _interceptor(buffer, _proxyRes, _req, res) {
        res.setHeader('x-proxy-by', '@roots/bud');
        res.setHeader('x-bud-proxy-origin', this.url.proxy.origin);
        res.setHeader('x-bud-dev-origin', this.url.dev.origin);
        return buffer;
    }
    /**
     * Returns the `onProxyRes` callback for `http-proxy-middleware`
     *
     * @public
     * @decorator `@bind`
     */
    make() {
        return (0, http_proxy_middleware_1.responseInterceptor)(this._interceptor);
    }
}
__decorate([
    bud_support_1.bind
], ResponseInterceptorFactory.prototype, "_interceptor", null);
__decorate([
    bud_support_1.bind
], ResponseInterceptorFactory.prototype, "make", null);
exports.ResponseInterceptorFactory = ResponseInterceptorFactory;
