"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Component = void 0;
/**
 * Component container
 *
 * @public
 */
class Component extends HTMLElement {
    constructor() {
        super();
        /**
         * Inner HTML
         *
         * @public
         */
        this.innerHTML = '';
        this.render = this.render.bind(this);
        this.clear = this.clear.bind(this);
        this.error = this.error.bind(this);
        this.connectedCallback = this.connectedCallback.bind(this);
        this.attributeChangedCallback =
            this.attributeChangedCallback.bind(this);
    }
    /**
     * Get accessor: has warnings
     *
     * @public
     */
    get hash() {
        return this.getAttribute('hash');
    }
    /**
     * @public
     */
    render() {
        this.innerHTML = ` \
<style>
  #bud-overlay__component {
    backdrop-filter: blur(10px);
    position: absolute;
    height: 100%;
    width: 100%;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    align-items: center;
    align-content: center;
    max-height: 100%;
    max-width: 100%;
    flex-wrap: wrap;
    display: none;
    flex-direction: column;
    transition: all 0.2s ease-in-out;
  }

  .bud-overlay__component_visible {
    display: flex;
  }
</style>

<div id="bud-overlay__component">
  <bud-inner>
    <bud-message>
      ${this.innerHTML}
    </bud-message>
  </bud-inner>
</div>
    `;
    }
    /**
     * Update status
     *
     * @public
     */
    update() {
        if (!this.payload?.errors?.length &&
            !this.payload?.warnings?.length &&
            this.payload.action == 'built') {
            this.clear();
            return;
        }
        this.error();
    }
    clear() {
        this.innerHTML = '';
        this.classList.remove('bud-overlay__component_visible');
    }
    error() {
        this.innerHTML = this.payload.errors.reduce((all, current) => [
            ...all,
            current.trimStart().trimEnd(),
        ], []);
        this.classList.add('bud-overlay__component_visible');
    }
    static get observedAttributes() {
        return ['id'];
    }
    attributeChangedCallback() {
        this.update();
    }
    connectedCallback() {
        if (!this.rendered) {
            this.render();
            this.rendered = true;
        }
    }
}
exports.Component = Component;
