/* global __resourceQuery */
/* istanbul ignore file */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
// @ts-ignore
const resourceQuery = __resourceQuery;
(async (query) => {
    const querystring = await Promise.resolve().then(() => __importStar(require('querystring')));
    const { hmr } = await Promise.resolve().then(() => __importStar(require('./bridge')));
    const { IndicatorController } = await Promise.resolve().then(() => __importStar(require('./indicator/indicator.controller')));
    const { OverlayController } = await Promise.resolve().then(() => __importStar(require('./overlay/overlay.controller')));
    const indicator = new IndicatorController();
    const overlay = new OverlayController();
    const instance = {
        path: '/__bud/hmr',
        timeout: 20 * 1000,
        overlay: true,
        reload: false,
        log: false,
        warn: true,
        name: '',
        autoConnect: false,
        overlayWarnings: false,
        ...querystring.parse(query.slice(1)),
    };
    hmr.setOptionsAndConnect(instance);
    hmr.subscribeAll(payload => {
        if (payload.action === 'reload')
            window.location.reload();
        indicator.update(payload);
        overlay.update(payload);
        // eslint-disable-next-line no-console
        console.log(`%c[bud]%c %c${payload.action}`, 'background: #525ddc; color: #ffffff;', 'background: transparent;', 'background: white; color: #343a40;');
    });
})(resourceQuery);
