"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseServer = void 0;
const bud_support_1 = require("@roots/bud-support");
/**
 * HTTP Server
 *
 * @public
 */
class BaseServer {
    /**
     * Constructor
     *
     * @param app - Framework
     */
    constructor(app, url) {
        this.app = app;
        this.url = url;
        this.logger = this.app.logger.instance.scope(this.constructor.name.toLowerCase());
    }
    /**
     * setup
     *
     * @public
     */
    async setup() {
        const port = await (0, bud_support_1.getPort)({ port: Number(this.url.port) });
        this.url.port = `${port}`;
        this.app.hooks.on('dev.url', this.url);
        this.logger.log(this.url.toString());
    }
    /**
     * Listen
     *
     * @public
     */
    async listen() {
        this.instance
            .listen({ port: this.url.port, host: this.url.hostname })
            .on('listening', this.onListening)
            .on('request', this.onRequest)
            .on('error', this.onError);
    }
    /**
     * Server listen event
     *
     * @public
     */
    onListening() {
        this.logger.info(`listening`);
    }
    /**
     * Server request
     *
     * @public
     * @decorator `@bind`
     */
    async onRequest(request, response) {
        if (request.headers['bud-healthcheck'])
            return response;
        if (response.statusCode === 200) {
            this.logger.success([response.statusCode], request.url);
            return response;
        }
        if (response.statusCode === 500) {
            this.logger.error([response.statusCode], request.url);
            return response;
        }
        return response;
    }
    /**
     * Server error
     *
     * @param error - error
     *
     * @public
     * @decorator `@bind`
     */
    onError(error) {
        this.app.error(error);
    }
}
__decorate([
    bud_support_1.bind
], BaseServer.prototype, "setup", null);
__decorate([
    bud_support_1.bind
], BaseServer.prototype, "listen", null);
__decorate([
    bud_support_1.bind
], BaseServer.prototype, "onListening", null);
__decorate([
    bud_support_1.bind
], BaseServer.prototype, "onRequest", null);
__decorate([
    bud_support_1.bind
], BaseServer.prototype, "onError", null);
exports.BaseServer = BaseServer;
